upstream client {
    # The react server is upstream, listening on port 3000
    server client:3000;
}

upstream api {
    # The server that talks to the redis an postgres servers
    # listening on port 5000
    server api:5000;
}


server {
    listen 80;

    #redirect / requests to client server
    location / {
        proxy_pass http://client;
    }

    # This allows the ngnix server to pass thru to the react client server to allow rebuilds 
    # on the browser when the code changes on the react client. 
    # otherwise you get an error similar to this:
    # WebSocket connection to 'ws://localhost:3050/sockjs-node' failed
    location /sockjs-node {
        proxy_pass http://client;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
    }

    #redirect /api requests to api server
    location /api {
        # rewrite the url - anything after /api/ will be passed to upstream
        # break prevents the new url from further rewrite commands that you may define
        rewrite /api/(.*) /$1 break;
        proxy_pass http://api;
    }
}